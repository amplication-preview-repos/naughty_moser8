/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TaskJob as PrismaTaskJob } from "@prisma/client";

export class TaskJobServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TaskJobCountArgs, "select">): Promise<number> {
    return this.prisma.taskJob.count(args);
  }

  async taskJobs<T extends Prisma.TaskJobFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaskJobFindManyArgs>
  ): Promise<PrismaTaskJob[]> {
    return this.prisma.taskJob.findMany<Prisma.TaskJobFindManyArgs>(args);
  }
  async taskJob<T extends Prisma.TaskJobFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaskJobFindUniqueArgs>
  ): Promise<PrismaTaskJob | null> {
    return this.prisma.taskJob.findUnique(args);
  }
  async createTaskJob<T extends Prisma.TaskJobCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaskJobCreateArgs>
  ): Promise<PrismaTaskJob> {
    return this.prisma.taskJob.create<T>(args);
  }
  async updateTaskJob<T extends Prisma.TaskJobUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaskJobUpdateArgs>
  ): Promise<PrismaTaskJob> {
    return this.prisma.taskJob.update<T>(args);
  }
  async deleteTaskJob<T extends Prisma.TaskJobDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaskJobDeleteArgs>
  ): Promise<PrismaTaskJob> {
    return this.prisma.taskJob.delete(args);
  }
}

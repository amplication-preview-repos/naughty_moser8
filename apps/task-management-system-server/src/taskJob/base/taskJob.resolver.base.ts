/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TaskJob } from "./TaskJob";
import { TaskJobCountArgs } from "./TaskJobCountArgs";
import { TaskJobFindManyArgs } from "./TaskJobFindManyArgs";
import { TaskJobFindUniqueArgs } from "./TaskJobFindUniqueArgs";
import { CreateTaskJobArgs } from "./CreateTaskJobArgs";
import { UpdateTaskJobArgs } from "./UpdateTaskJobArgs";
import { DeleteTaskJobArgs } from "./DeleteTaskJobArgs";
import { TaskJobService } from "../taskJob.service";
@graphql.Resolver(() => TaskJob)
export class TaskJobResolverBase {
  constructor(protected readonly service: TaskJobService) {}

  async _taskJobsMeta(
    @graphql.Args() args: TaskJobCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TaskJob])
  async taskJobs(
    @graphql.Args() args: TaskJobFindManyArgs
  ): Promise<TaskJob[]> {
    return this.service.taskJobs(args);
  }

  @graphql.Query(() => TaskJob, { nullable: true })
  async taskJob(
    @graphql.Args() args: TaskJobFindUniqueArgs
  ): Promise<TaskJob | null> {
    const result = await this.service.taskJob(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TaskJob)
  async createTaskJob(
    @graphql.Args() args: CreateTaskJobArgs
  ): Promise<TaskJob> {
    return await this.service.createTaskJob({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TaskJob)
  async updateTaskJob(
    @graphql.Args() args: UpdateTaskJobArgs
  ): Promise<TaskJob | null> {
    try {
      return await this.service.updateTaskJob({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TaskJob)
  async deleteTaskJob(
    @graphql.Args() args: DeleteTaskJobArgs
  ): Promise<TaskJob | null> {
    try {
      return await this.service.deleteTaskJob(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

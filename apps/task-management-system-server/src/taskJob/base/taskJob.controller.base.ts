/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TaskJobService } from "../taskJob.service";
import { TaskJobCreateInput } from "./TaskJobCreateInput";
import { TaskJob } from "./TaskJob";
import { TaskJobFindManyArgs } from "./TaskJobFindManyArgs";
import { TaskJobWhereUniqueInput } from "./TaskJobWhereUniqueInput";
import { TaskJobUpdateInput } from "./TaskJobUpdateInput";

export class TaskJobControllerBase {
  constructor(protected readonly service: TaskJobService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TaskJob })
  async createTaskJob(
    @common.Body() data: TaskJobCreateInput
  ): Promise<TaskJob> {
    return await this.service.createTaskJob({
      data: data,
      select: {
        createdAt: true,
        cronExpression: true,
        description: true,
        id: true,
        isActive: true,
        isOneTime: true,
        lastExecutionTime: true,
        name: true,
        nextExecutionTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TaskJob] })
  @ApiNestedQuery(TaskJobFindManyArgs)
  async taskJobs(@common.Req() request: Request): Promise<TaskJob[]> {
    const args = plainToClass(TaskJobFindManyArgs, request.query);
    return this.service.taskJobs({
      ...args,
      select: {
        createdAt: true,
        cronExpression: true,
        description: true,
        id: true,
        isActive: true,
        isOneTime: true,
        lastExecutionTime: true,
        name: true,
        nextExecutionTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TaskJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async taskJob(
    @common.Param() params: TaskJobWhereUniqueInput
  ): Promise<TaskJob | null> {
    const result = await this.service.taskJob({
      where: params,
      select: {
        createdAt: true,
        cronExpression: true,
        description: true,
        id: true,
        isActive: true,
        isOneTime: true,
        lastExecutionTime: true,
        name: true,
        nextExecutionTime: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TaskJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTaskJob(
    @common.Param() params: TaskJobWhereUniqueInput,
    @common.Body() data: TaskJobUpdateInput
  ): Promise<TaskJob | null> {
    try {
      return await this.service.updateTaskJob({
        where: params,
        data: data,
        select: {
          createdAt: true,
          cronExpression: true,
          description: true,
          id: true,
          isActive: true,
          isOneTime: true,
          lastExecutionTime: true,
          name: true,
          nextExecutionTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TaskJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTaskJob(
    @common.Param() params: TaskJobWhereUniqueInput
  ): Promise<TaskJob | null> {
    try {
      return await this.service.deleteTaskJob({
        where: params,
        select: {
          createdAt: true,
          cronExpression: true,
          description: true,
          id: true,
          isActive: true,
          isOneTime: true,
          lastExecutionTime: true,
          name: true,
          nextExecutionTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
